steps:
  - script: |
      set -e
      
      ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=$(ssh_timeout_s) "$(username)"@"$(publicIP)" '
      source /etc/profile.d/deploy_server.sh
      
      # Modify environment value so it starts with u and with length of 5
      deployer_env=${{parameters.deployer_env}}
      buildId=$(Build.BuildId)
      deployer_isRelease=${deployer_env%%$buildId*}
      if [ -z "${deployer_isRelease}" ]
      then 
        deployer_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        deployer_prefix=${deployer_env}
      fi

      deployer_rg="${deployer_prefix}-EAUS-DEP00-INFRASTRUCTURE"

      # Modify environment value so it starts with u and with length of 5
      saplib_env=${{parameters.saplib_env}}
      saplib_isRelease=${saplib_env%%$buildId*}
      if [ -z "${saplib_isRelease}" ]
      then 
        saplib_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        saplib_prefix=${saplib_env}
      fi

      saplib_rg="${saplib_prefix}-EAUS-SAP_LIBRARY"
      
      repo_dir=$HOME/${saplib_rg}/sap-hana

      deployer_ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/LOCAL/${deployer_rg}
      saplib_ws_dir=$HOME/Azure_SAP_Automated_Deployment/WORKSPACES/SAP_LIBRARY/${saplib_rg}

      tfstate_sa_id=$(az storage account list --resource-group ${saplib_rg} | jq -r "'".[] |  select(.name | contains(\\\"tfstate\\\")).id"'")
      tfstate_sa_name=$(az storage account list --resource-group ${saplib_rg} | jq -r "'".[] |  select(.name | contains(\\\"tfstate\\\")).name"'")
      deployer_key="${deployer_rg}.terraform.tfstate"
      saplib_key="${saplib_rg}.terraform.tfstate"

      echo "=== Checkout required branch ${{parameters.branch_name}} ==="
      cd ${repo_dir} && git checkout ${{parameters.branch_name}}
 
      echo "=== Upload deployer tfstate under ${deployer_ws_dir} to saplibrary ==="
      cd ${deployer_ws_dir}
      terraform init -force-copy \
        --backend-config "subscription_id=$(landscape-subscription)" \
        --backend-config "resource_group_name=${saplib_rg}" \
        --backend-config "storage_account_name=${tfstate_sa_name}" \
        --backend-config "container_name=tfstate" \
        --backend-config "key=${deployer_key}" \
        ${repo_dir}/deploy/terraform/run/sap_deployer/

      echo "=== Re-apply deployer with run ==="
      input=${deployer_ws_dir}/${deployer_rg}.json
      terraform apply -auto-approve -var-file=${input} ${repo_dir}/deploy/terraform/run/sap_deployer/

      echo "=== Rename local tfstate filename for saplib unit test ==="
      mv terraform.tfstate.backup terraform.tfstate

      echo "=== Upload saplib tfstate under ${saplib_ws_dir} to saplibrary ==="
      cd ${saplib_ws_dir}
      terraform init -force-copy \
        --backend-config "subscription_id=$(landscape-subscription)" \
        --backend-config "resource_group_name=${saplib_rg}" \
        --backend-config "storage_account_name=${tfstate_sa_name}" \
        --backend-config "container_name=tfstate" \
        --backend-config "key=${saplib_key}" \
        ${repo_dir}/deploy/terraform/run/sap_library/

      echo "=== Re-apply saplib with run ==="
      input=${saplib_ws_dir}/${saplib_rg}.json
      cat ${input} \
      | jq --arg tfstate_resource_id "${tfstate_sa_id}" "'". += {
        tfstate_resource_id: \\\$tfstate_resource_id
      }"'" > tmp.json
      mv tmp.json ${input}

      cat ${input}

      terraform apply -auto-approve -var-file=${input} ${repo_dir}/deploy/terraform/run/sap_library/
      '

      echo "=== Add access policy recover for pipeline SPN back to deployer KV ==="

      az login --service-principal --user $(hana-pipeline-spn-id) --password $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none

      # Modify environment value so it starts with u and with length of 5
      deployer_env=${{parameters.deployer_env}}
      buildId=$(Build.BuildId)
      deployer_isRelease=${deployer_env%%$buildId*}
      if [ -z "${deployer_isRelease}" ]
      then 
        deployer_prefix="U$(echo $(Build.BuildId) | rev | cut -c1-4 | rev)"
      else
        deployer_prefix=${deployer_env}
      fi

      deployer_rg="${deployer_prefix}-EAUS-DEP00-INFRASTRUCTURE"

      deployer_kv_name=$(az keyvault list --resource-group ${deployer_rg} | jq -r '.[] | select(.name | contains("user")).name')  
      az keyvault set-policy --name ${deployer_kv_name} --secret-permissions get list set delete recover --object-id $(hana-pipeline-spn-objId) --output none
    displayName: "Post saplibrary"
    env:
      ARM_CLIENT_ID: $(hana-pipeline-spn-id)
      ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
      ARM_TENANT_ID: $(landscape-tenant)
      ARM_SUBSCRIPTION_ID: $(landscape-subscription)
