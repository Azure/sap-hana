---

- name: Create device list
  shell: ls -l /dev/disk/azure/scsi1/* | awk '{split($0,disks," "); system("readlink -f " disks[9])}'
  register: device_list

- name: Create dictionary with disk name and devices list
  set_fact:
    start: "{{ start|int+item.count }}"
    disk_dict: "{{ disk_dict | combine({ item.name: {'count': item.count, 'devices': device_list.stdout_lines[start|int:start|int+item.count]} }) }}"
  loop: "{{ hdb_sizes[hana_database.size].storage }}"
  when: item.name != 'os'

- name: Physical volume group
  lvg: 
    vg: "vg_{{ item.key }}"
    pvs: "{{ item.value.devices }}"
  with_dict: "{{ disk_dict }}"
  register: physical_vg
  failed_when: physical_vg is failed

- name: Logical volume group
  lvol:
    state: present
    vg: "vg_{{ item.key }}"
    lv: "lv_hana_{{ item.key }}"
    size: 100%FREE
  with_dict: "{{ disk_dict }}"
  register: logical_vg
  failed_when: logical_vg is failed
 
- name: Mount point directories
  file:
    path: "{% if item.key=='sap' %}/usr/{{ item.key }}{% else %}/hana/{{ item.key }}{% endif %}"
    state: directory
  with_dict: "{{ disk_dict }}"

- name: Filesystems
  filesystem:
     fstype: "{{ hana_database.filesystem | default('xfs') }}"
     dev: "/dev/vg_{{ item.key }}/lv_hana_{{ item.key }}"
  with_dict: "{{ disk_dict }}"
  register: file_system
  failed_when: file_system is failed

- name: Mount volumes
  mount:
    path: "{% if item.key=='sap' %}/usr/{{ item.key }}{% else %}/hana/{{ item.key }}{% endif %}"
    fstype: "{{ hana_database.filesystem | default('xfs') }}"
    opts: "defaults,nofail"
    src: "/dev/vg_{{ item.key }}/lv_hana_{{ item.key }}"
    state: mounted
  with_dict: "{{ disk_dict }}"
  register: vol_mount
  failed_when: vol_mount is failed
