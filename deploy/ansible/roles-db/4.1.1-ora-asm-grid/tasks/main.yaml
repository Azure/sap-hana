#   SAP: Register BOM
#   Prepare ASM Disks
#   Run the Oracle universal installer in silent mode. Refer to SAP Note : 2660017 Oracle Software Installation on Unix
#

# TODO: Considerations
#         15G+ swap space for Oracle DB installation.
#         message server acl
#         certificates
#         secure storage key
#

---

- name:  
  ansible.builtin.set_fact:
    dir_params:                   "{{ target_media_location }}/.params"


- name:                                Load the disk configuration settings
  ansible.builtin.include_vars:        disks_config_asm.yml

#   0x) Create hidden directory for parameter files
- name:     "Create hidden directory"
  ansible.builtin.file:
    path:   "{{ item.path }}"
    state:  directory
    mode:   0755
  loop:
    - { state: 'directory', mode: '0755', path: '{{ dir_params }}' }

- name:     "Create run flag directory"
  ansible.builtin.file:
    path:   /oracle/sap_deployment_automation
    state:  directory
    mode:   0755

- name:     "Create Grid software directory"
  ansible.builtin.file:
    path:   /oracle/stage/{{ ora_release }}/grid_home
    state:  directory
    mode:   0755


#   Oracle Grid: Response file
- name:                               "SAP Oracle ASM: deploy Grid install response file"
  ansible.builtin.template:
    src:                              ORACLE_19c_00_asm_v1_install.rsp.j2
    dest:                             "/oracle/sap_deployment_automation/ORACLE_{{ ora_release }}c_00_asm_{{ ansible_hostname }}_{{ anydb_sid }}_install.rsp"
    mode:                             0644
    force:                            true


#STEP1 Install Grid Software
# Unzipping this pakcage might have longer runtime.
- name:               "Unzip the Gridsoftware"
  become:             yes
  become_user:        root
  ansible.builtin.shell: |
                      set -o errexit
                      unzip -o -d /oracle/stage/{{ ora_release }}/grid_home  /usr/sap/install/oraserver/LINUX_X86_64/grid_home/LINUX.X64_193000_grid_home.zip
                      chown -R oracle:oinstall *
                      yum install -y /oracle/stage/{{ ora_release }}/grid_home/cv/rpm/cvuqdisk-1.0.10-1.rpm
                      touch /oracle/sap_deployment_automation/gridsw.txt
  args:
    chdir:             /oracle/stage
    creates:           /oracle/sap_deployment_automation/gridsw.txt



# #Debug for testing
# - name:                           "Install ASM package ouput"
#   debug:
#     var:                           asmpackageouput
#     verbosity:                      2


#STEP2 RUN THE INSTALLATION - EXECUTE.

- name:               "Execute GRIDSETUP"
  become:             yes
  become_user:        oracle
  ansible.builtin.shell: |
                      set -o errexit
                      ./gridSetup.sh -silent -responseFile /oracle/sap_deployment_automation/ORACLE_19c_00_asm_{{ ansible_hostname }}_{{ anydb_sid }}_install.rsp |tee -a /oracle/gridinstall.log
  register:           gridinstaller_results
  #failed_when:        gridinstaller_results.rc >= 2              #installer returns rc=1 (exited with warning) by default when run is silent mode as the oratab file is created only after running the root.sh
  environment:
    DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
  args:       
    executable:        /bin/csh
    chdir:            "/oracle/stage/{{ ora_release }}/grid_home"
    creates:           /oracle/sap_deployment_automation/gridinstall.txt

- name:            "create after a sucessfull install"
  ansible.builtin.shell: |                    
                      touch /oracle/sap_deployment_automation/gridinstall.txt


#STEP3 POST PROCESSING.


- name:           "Oracle Post Processing - Run root.sh"                
  become:         yes
  become_user:    root
  ansible.builtin.shell: |   
                     /oracle/oraInventory/orainstRoot.sh
                     /oracle/stage/{{ ora_release }}/grid_home/root.sh                                    
  register: rootscript_results
  args:
    executable:       /bin/csh
    creates:          /oracle/sap_deployment_automation/gridrootscripstexecuted.txt

- name:            "creates after a sucessfull script execution"
  ansible.builtin.shell: |                    
                      touch /oracle/sap_deployment_automation/gridrootscripstexecuted.txt


# #STEP 4  Execute Config tools.
- name:               "Execute ASM Configtools"
  become:             yes
  become_user:        oracle
  ansible.builtin.shell: |
                      set -o errexit
                      ./gridSetup.sh -executeConfigTools -silent -responseFile /oracle/sap_deployment_automation/ORACLE_19c_00_asm_{{ ansible_hostname }}_{{ anydb_sid }}_install.rsp |tee -a /oracle/asmtoolsinstall.log
  register:           toolsinstaller_results
  #failed_when:        gridinstaller_results.rc >= 2              #installer returns rc=1 (exited with warning) by default when run is silent mode as the oratab file is created only after running the root.sh
  environment:
    DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
  args:       
    executable:        /bin/csh
    chdir:            "/oracle/stage/{{ ora_release }}/grid_home"
    creates:           /oracle/sap_deployment_automation/asmtoolsinstall.txt

- name:            "create after a sucessfull install"
  ansible.builtin.shell: |                    
                      touch /oracle/sap_deployment_automation/asmtoolsinstall.txt


# #STEP 5 Create ARCH and RECO disk groups using ASMCA.
# Default value of rdbms compatiable is 10.1.0.0 however for SAP installation it needs a minimum value of 11.2.0.2.
# SAP Note 1739274 - Database Parameter COMPATIBLE
# SAP Note 1773593 - CREATE DATABASE  on ASM Fails with ORA-15204

- name:           "Create ASM Disk groups ARCH and RECO"                
  become:         yes
  become_user:    oracle
  ansible.builtin.shell: |   
                     set -o errexit
                     ./asmca -silent -createDiskGroup -diskGroupName RECO -diskList '{{ recolistrsp }}1' 
                     ./asmca -silent -createDiskGroup -diskGroupName ARCH -diskList '{{ archlistrsp }}1' 
                     
  register: diskgroupcreation_results
  environment:
    DB_SID:                       "{{anydb_sid}}"
    CV_ASSUME_DISTID:             OL7
  args:
    executable:       /bin/csh
    chdir:            "/oracle/stage/{{ ora_release }}/grid_home/bin"
    creates:          /oracle/sap_deployment_automation/diskgroupcreated.txt

- name:            "creates after a sucessfull disk group creation"
  ansible.builtin.shell: |                    
                      touch /oracle/sap_deployment_automation/diskgroupcreated.txt






# #   0x) remove hidden directory for parameter files
# - name:     "remove hidden directory"
#   ansible.builtin.file:
#     path:   "{{ item.path }}"
#     state:  "{{ item.state }}"
#     mode:   "{{ item.mode }}"
#   loop:
#     - { state: 'absent',    mode: '0755', path: '{{ dir_params }}' }

...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
