# /*----------------------------------------------------------------------------8
# |                                                                            |
# |                         OS Base Disk Configuration                          |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
---

# -------------------------------------+---------------------------------------8
#
# Task: 1.5     - os-disk-setup
#
# -------------------------------------+---------------------------------------8


# -------------------------------------+---------------------------------------8
#
# <Comment Header>
#
# -------------------------------------+---------------------------------------8

#----------------------------------------
# BEGIN
#----------------------------------------

#----------------------------------------
# END
#----------------------------------------

# # Prepare disks and mount points

# # TODO: Unnecessary, values can be found in hostvars; refactor
# - name: Create device list
#   shell: ls -l /dev/disk/azure/scsi1/* | awk '{split($0,disks," "); system("readlink -f " disks[9])}'
#   register: device_list

# # TODO: Find a different way
# - name: Create dictionary with disk name and devices list
#   set_fact:
#     start: "{{ start|int+item.count }}"
#     disk_dict: "{{ disk_dict | combine({ item.name: {'count': item.count, 'mount_point': item.mount_point, 'devices': device_list.stdout_lines[start|int:start|int+item.count]} }) }}"
#   loop: "{{ hdb_sizes[hana_database.size].storage }}"
#   when: item.name != 'os'

# # TODO: Refactor
# # Check if installation paths are ready. If paths are unready, path_status_flag will be set. Then subsequent tasks will be executed.
# - import_tasks: installation_path_prechecks.yml

# - include_tasks: lvm_mount.yml
#   when: path_status_flag is defined

- name: Example from an Ansible Playbook
  ansible.builtin.ping:

- debug:
    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}

  # Get all the unique disk types from sap-parameters
# Translate this to JINJA later

- name: Get the unique disk types
  set_fact:
    disktypes: "{{ (disktypes|default([]) +  [ item.type ])|unique }}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.host == inventory_hostname

- name: Prepare the disk list
  set_fact:
    alldisks: "{{ alldisks|default([]) +  [ { 'type': item.type, 'vg' : 'vg_' ~ item.type, 'pvs' :  '/dev/disk/azure/scsi1/lun' ~ item.LUN } ] }}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.host == inventory_hostname

- name: Store the data pvs valuas into a list
  set_fact:
    pvs_data: "{{ (pvs_data|default([]) +  [ '/dev/disk/azure/scsi1/lun' ~ item.LUN ]) | list}}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.type == 'data' and item.host == inventory_hostname

- name: Convert the data pvs list to a string
  set_fact:
    pvs_data_str: "{{ pvs_data | default([]) | join(',') }}"
    cacheable: yes

# Log volume

- name: Store the log pvs valuas into a list
  set_fact:
    pvs_log: "{{ (pvs_log|default([]) +  [ '/dev/disk/azure/scsi1/lun' ~ item.LUN ]) | list}}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.type == 'log' and item.host == inventory_hostname

- name: Convert the log pvs list to a string
  set_fact:
    pvs_log_str: "{{ pvs_log | default([]) | join(',') }}"
    cacheable: yes

# SAP volume

- name: Store the sap pvs valuas into a list
  set_fact:
    pvs_sap: "{{ (pvs_sap|default([]) +  [ '/dev/disk/azure/scsi1/lun' ~ item.LUN ]) | list}}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.type == 'sap' and item.host == inventory_hostname

- name: Convert the sap pvs list to a string
  set_fact:
    pvs_sap_str: "{{ pvs_sap | default([]) | join(',') }}"
    cacheable: yes

- name: Create the consolidated variable
  set_fact:
    LVM_data: "{{ [{ 'vg':'vg_sap', 'pvs': '{{ pvs_sap_str }}' },{ 'vg':'vg_data', 'pvs': '{{ pvs_data_str }}' },{ 'vg':'vg_log', 'pvs': '{{ pvs_log_str }}' }] }}"

- debug:
    var: LVM_data

- lvg:
    vg:     "{{ item.vg }}"
    pvs:    "{{ item.pvs }}"

  loop: "{{ LVM_data }}"
  when:
    - item.pvs | bool
