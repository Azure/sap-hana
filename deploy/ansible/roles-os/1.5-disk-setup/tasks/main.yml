# /*---------------------------------------------------------------------------8
# |                                                                            |
# |                         OS Base Disk Configuration                         |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
---
# -------------------------------------+---------------------------------------8
#
# Task: 1.5     - os-disk-setup
#
# -------------------------------------+---------------------------------------8

# -------------------------------------+---------------------------------------8
#
# <Comment Header>
#
# -------------------------------------+---------------------------------------8

# ----------------------------------------
# BEGIN
# ----------------------------------------

# ----------------------------------------
# END
# ----------------------------------------

# # Prepare disks and mount points

# # TODO: Refactor
# # Check if installation paths are ready. If paths are unready, path_status_flag will be set. Then subsequent tasks will be executed.
# - import_tasks: installation_path_prechecks.yml

# - include_tasks: lvm_mount.yml
#   when: path_status_flag is defined

# Expectations:
#
#   Volume Groups: (pvs are only examples)
#     - { tier: 'all',      vg: 'vg_sap',         pvs: '/dev/disk/azure/scsi1/lun0' }
#     - { tier: 'hdb',      vg: 'vg_hana_data',   pvs: '/dev/disk/azure/scsi1/lun1,/dev/disk/azure/scsi1/lun2,/dev/disk/azure/scsi1/lun3' }
#     - { tier: 'hdb',      vg: 'vg_hana_log',    pvs: '/dev/disk/azure/scsi1/lun4,/dev/disk/azure/scsi1/lun5,/dev/disk/azure/scsi1/lun6' }
#     - { tier: 'hdb',      vg: 'vg_hana_backup', pvs: '/dev/disk/azure/scsi1/lun7' }
#
#   Logical Volumes:
#    - { tier: 'all',         lv: 'lv_usrsap',        vg: 'vg_sap',         size: '64g',       opts: '' }
#    - { tier: 'preparation', lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '128g',      opts: '' }
#    - { tier: 'preparation', lv: 'lv_usrsapinstall', vg: 'vg_sap',         size: '100%FREE',  opts: '' }
#    - { tier: 'hdb',         lv: 'lv_hana_shared',   vg: 'vg_sap',         size: '100%FREE',  opts: '' }
#    - { tier: 'hdb',         lv: 'lv_hana_data',     vg: 'vg_hana_data',   size: '100%FREE',  opts: '-i 3 -I 128' }
#    - { tier: 'hdb',         lv: 'lv_hana_log',      vg: 'vg_hana_log',    size: '100%FREE',  opts: '-i 3 -I 32' }
#    - { tier: 'hdb',         lv: 'lv_hana_backup',   vg: 'vg_hana_backup', size: '100%FREE',  opts: '' }
#    - { tier: 'web',         lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '1g',        opts: '' }
#
#   Filesystems:
#    - { tier: 'all',         fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsap' }
#    - { tier: 'preparation', fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }
#    - { tier: 'preparation', fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsapinstall' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_sap/lv_hana_shared' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_data/lv_hana_data' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_log/lv_hana_log' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_backup/lv_hana_backup' }
#    - { tier: 'web',         fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }

# Get all the unique disk types from sap-parameters

# -------------------------------------+---------------------------------------8
#
- name:                           Get the unique disk types
  set_fact:
    disktypes:                    "{{ 
                                      (disktypes|default([])
                                      +
                                      [ { 'type': item.type }])|unique
                                    }}"
    cacheable:                    yes
  loop:                           "{{ disks }}"
  when:
                                  - item.host is defined
                                  - item.host == inventory_hostname

- name:                           "print unique disks"
  debug:
    var:                          disktypes
    verbosity:                    2



# -------------------------------------+---------------------------------------8
#
- name:                           "Define volume groups"
  set_fact:
    volume_groups:                "{{ lookup ('template', 'volume_groups.j2') }}"

- name:                           "Print volume group details"
  debug:
    var:                          volume_groups
    verbosity:                    2



# -------------------------------------+---------------------------------------8
#
- name:                           "Volume Group creation"
  lvg:
    vg:                           "{{ item.vg }}"
    pvs:                          "{{ item.pvs }}"
    pesize:                       4M
    state:                        present
  loop:                           "{{ volume_groups }}"



# -------------------------------------+---------------------------------------8
#
- name:                           "Logical Volume creation"
  lvol:
    lv:                           "{{ item.lv }}"
    vg:                           "{{ item.vg }}"
    size:                         "{{ item.size }}"
    opts:                         "{{ item.opts }}"
    active:                       yes
    state:                        present
    shrink:                       no
    resizefs:                     no
  loop:
    - { tier: 'all',         lv: 'lv_usrsap',        vg: 'vg_sap',         size: '64g',       opts: ''                                }
    - { tier: 'scs',         lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '128g',      opts: ''                                }
    - { tier: 'scs',         lv: 'lv_usrsapinstall', vg: 'vg_sap',         size: '100%FREE',  opts: ''                                }
    - { tier: 'hana',        lv: 'lv_hana_shared',   vg: 'vg_sap',         size: '100%FREE',  opts: ''                                }
    - { tier: 'hana',        lv: 'lv_hana_data',     vg: 'vg_hana_data',   size: '100%FREE',  opts: '-i {{ count_hana_data }} -I 256' }
    - { tier: 'hana',        lv: 'lv_hana_log',      vg: 'vg_hana_log',    size: '100%FREE',  opts: '-i {{ count_hana_log  }}  -I 64' }
    - { tier: 'hana',        lv: 'lv_hana_backup',   vg: 'vg_hana_backup', size: '100%FREE',  opts: ''                                }
    - { tier: 'web',         lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '1g',        opts: ''                                }
  when:                           item.tier == "all" or
                                  item.tier == node_tier
  vars:
  # count_hana_data:        "{{ (                                                       # Integer; Number of disk devices.
  #                               (
  #                                 volume_groups                                       # Analyze List of Dictionaries.
  #                                 | selectattr('vg', 'search', 'vg_hana_data')        # Find Dictionary for 'vg_hana_data'.
  #                                 | list
  #                                 | first
  #                               ).pvs                                                 # Get value of 'pvs' key - List of disksdevices.
  #                               | default('NOT_FOUND')
  #                             ).split(',')                                            # Split on the comma.
  #                             | count                                                 # Count the elements
  #                         }}"
  #
    # count_hana_data:        "{{ ((volume_groups|selectattr('vg', 'search', 'vg_hana_data')|list|first).pvs|default('NOT_FOUND')).count(',')+1 }}"
    count_hana_data:        "{{ ((volume_groups|selectattr('vg', 'search', 'vg_hana_data')|list|first).pvs|default('NOT_FOUND')).split(',')|count }}"
    count_hana_log:         "{{ ((volume_groups|selectattr('vg', 'search', 'vg_hana_log') |list|first).pvs|default('NOT_FOUND')).split(',')|count }}"



# -------------------------------------+---------------------------------------8
#
# TODO: make the dev constant a global variable since it is used in multiple places (sap-mounts)
#
- name:                           "Filesystem creation"
  filesystem:
    dev:                          "{{ item.dev }}"
    fstype:                       "{{ item.fstype }}"
  loop:                           
   - { tier: 'all',          fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsap' }
   - { tier: 'scs',          fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }
   - { tier: 'scs',          fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsapinstall' }
   - { tier: 'hana',         fstype: 'xfs', dev: '/dev/vg_sap/lv_hana_shared' }
   - { tier: 'hana',         fstype: 'xfs', dev: '/dev/vg_hana_data/lv_hana_data' }
   - { tier: 'hana',         fstype: 'xfs', dev: '/dev/vg_hana_log/lv_hana_log' }
   - { tier: 'hana',         fstype: 'xfs', dev: '/dev/vg_hana_backup/lv_hana_backup' }
   - { tier: 'web',          fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }
  when:                           item.tier == "all" or
                                  item.tier == node_tier

...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/
