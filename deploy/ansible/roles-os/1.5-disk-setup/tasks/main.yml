# /*----------------------------------------------------------------------------8
# |                                                                            |
# |                         OS Base Disk Configuration                          |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
---

# -------------------------------------+---------------------------------------8
#
# Task: 1.5     - os-disk-setup
#
# -------------------------------------+---------------------------------------8


# -------------------------------------+---------------------------------------8
#
# <Comment Header>
#
# -------------------------------------+---------------------------------------8

#----------------------------------------
# BEGIN
#----------------------------------------

#----------------------------------------
# END
#----------------------------------------

# # Prepare disks and mount points

# # TODO: Refactor
# # Check if installation paths are ready. If paths are unready, path_status_flag will be set. Then subsequent tasks will be executed.
# - import_tasks: installation_path_prechecks.yml

# - include_tasks: lvm_mount.yml
#   when: path_status_flag is defined


# Expectations:
#
#   Volume Groups: (pvs are only examples)
#     - { tier: 'all',      vg: 'vg_sap',         pvs: '/dev/disk/azure/scsi1/lun0' }
#     - { tier: 'hdb',      vg: 'vg_hana_data',   pvs: '/dev/disk/azure/scsi1/lun1,/dev/disk/azure/scsi1/lun2,/dev/disk/azure/scsi1/lun3' }
#     - { tier: 'hdb',      vg: 'vg_hana_log',    pvs: '/dev/disk/azure/scsi1/lun4,/dev/disk/azure/scsi1/lun5,/dev/disk/azure/scsi1/lun6' }
#     - { tier: 'hdb',      vg: 'vg_hana_backup', pvs: '/dev/disk/azure/scsi1/lun7' }
#
#   Logical Volumes:
#    - { tier: 'all',         lv: 'lv_usrsap',        vg: 'vg_sap',         size: '64g',       opts: '' }
#    - { tier: 'preparation', lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '128g',      opts: '' }
#    - { tier: 'preparation', lv: 'lv_usrsapinstall', vg: 'vg_sap',         size: '100%FREE',  opts: '' }
#    - { tier: 'hdb',         lv: 'lv_hana_shared',   vg: 'vg_sap',         size: '100%FREE',  opts: '' }
#    - { tier: 'hdb',         lv: 'lv_hana_data',     vg: 'vg_hana_data',   size: '100%FREE',  opts: '-i 3 -I 128' }
#    - { tier: 'hdb',         lv: 'lv_hana_log',      vg: 'vg_hana_log',    size: '100%FREE',  opts: '-i 3 -I 32' }
#    - { tier: 'hdb',         lv: 'lv_hana_backup',   vg: 'vg_hana_backup', size: '100%FREE',  opts: '' }
#    - { tier: 'web',         lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '1g',        opts: '' }
#
#   Filesystems:
#    - { tier: 'all',         fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsap' }
#    - { tier: 'preparation', fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }
#    - { tier: 'preparation', fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsapinstall' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_sap/lv_hana_shared' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_data/lv_hana_data' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_log/lv_hana_log' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_backup/lv_hana_backup' }
#    - { tier: 'web',         fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }




- debug:
    msg: System {{ inventory_hostname }} has uuid {{ ansible_product_uuid }}

  # Get all the unique disk types from sap-parameters
# Translate this to JINJA later

- name: Get the unique disk types
  set_fact:
    disktypes: "{{ (disktypes|default([]) +  [ item.type ])|unique }}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.host == inventory_hostname

- name: Prepare the disk list
  set_fact:
    alldisks: "{{ alldisks|default([]) +  [ { 'type': item.type, 'vg' : 'vg_' ~ item.type, 'pvs' :  '/dev/disk/azure/scsi1/lun' ~ item.LUN } ] }}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.host == inventory_hostname

- name: Store the data pvs valuas into a list
  set_fact:
    pvs_data: "{{ (pvs_data|default([]) +  [ '/dev/disk/azure/scsi1/lun' ~ item.LUN ]) | list}}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.type == 'data' and item.host == inventory_hostname

- name: Convert the data pvs list to a string
  set_fact:
    pvs_data_str: "{{ pvs_data | default([]) | join(',') }}"
    cacheable: yes

# Log volume

- name: Store the log pvs valuas into a list
  set_fact:
    pvs_log: "{{ (pvs_log|default([]) +  [ '/dev/disk/azure/scsi1/lun' ~ item.LUN ]) | list}}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.type == 'log' and item.host == inventory_hostname

- name: Convert the log pvs list to a string
  set_fact:
    pvs_log_str: "{{ pvs_log | default([]) | join(',') }}"
    cacheable: yes

# Backup volume

- name: Store the backup pvs valuas into a list
  set_fact:
    pvs_backup: "{{ (pvs_backup|default([]) +  [ '/dev/disk/azure/scsi1/lun' ~ item.LUN ]) | list}}"
    cacheable: yes
  loop: "{{ disks }}"
  when: item.type == 'backup' and item.host == inventory_hostname

- name: Convert the backup pvs list to a string
  set_fact:
    pvs_backup_str: "{{ pvs_backup | default([]) | join(',') }}"
    cacheable: yes

- name: Create the list of the multi disk items
  set_fact:
    LVM_data: "{{ [ 
    { 'tier' : 'hdb'    'vg':'vg_backup',   'pvs': '{{ pvs_backup_str }}',  'lv':'lv_backup', 'size': '100%FREE', 'opt' : '',             'fstype': 'xfs', 'dev': '/dev/vg_backup/lv_backup'}, 
    { 'tier' : 'hdb'    'vg':'vg_data',     'pvs': '{{ pvs_data_str }}',    'lv':'lv_data',   'size': '100%FREE', 'opt' : '-i 3 -I 256',  'fstype': 'xfs', 'dev': '/dev/vg_data/lv_data'}, 
    { 'tier' : 'hdb'    'vg':'vg_log',      'pvs': '{{ pvs_log_str }}',     'lv':'lv_log',    'size': '100%FREE', 'opt' : '-i 3 -I 64',   'fstype': 'xfs', 'dev': '/dev/vg_log/lv_log'} 
    ] }}"

- name: Create the list of the single disk items
  set_fact:
    LVM_data_single: "{{ [ 
    { 'tier' : 'all'    'vg':'vg_{{ item.type }}',   'pvs': '{{ '/dev/disk/azure/scsi1/lun' ~ item.LUN }}',  'lv':'lv_{{item.type}}', 'size': '100%FREE', 'opt' : '',             'fstype': 'xfs', 'dev': '/dev/vg_{{item.type}}/lv_{{item.type}}'}, 
    ] }}"

  loop: "{{ disks }}"
  when: 
    - item.type != 'log'
    - item.type != 'data'
    - item.type != 'backup'
    - item.host == inventory_hostname

- name: Create the data for the prepare phase
  set_fact:
    LVM_data_prepare: "{{ [ 
    { 'tier' : 'preparation'    'vg':'vg_sap',   'pvs': '',  'lv':'lv_sapmnt',          'size': '128g',     'opt' : '',         'fstype': 'xfs', 'dev': '/dev/vg_sap/lv_sapmnt'}, 
    { 'tier' : 'preparation'    'vg':'vg_sap',   'pvs': '',  'lv':'lv_usrsapinstall',   'size': '100%FREE', 'opt' : '',         'fstype': 'xfs', 'dev': '/dev/vg_sap/lv_usrsapinstall'}
    ] }}"

  when: 
    - item.tier == 'preparation'
    - item.host == inventory_hostname


- name: "Group the data"
  set_fact:
    disk_data: {{ LVM_data + LVM_data_single + LVM_data_prepare}}

- name: Volume Group creation
  lvg:
    vg:     "{{ item.vg }}"
    pvs:    "{{ item.pvs }}"
    pesize: 4M
    state:  present

  loop: "{{ disk_data }}"
  when:
    - item.pvs != ""
    - item.tier != 'preparation'

- name: "Logical Volume creation"
  lvol:
    lv:       "{{ item.lv }}"
    vg:       "{{ item.vg }}"
    size:     "{{ item.size }}"
    active:   yes
    state:    present
    shrink:   no
    resizefs: no
  loop: "{{ disk_data }}"
  when:
    - item.vg != ""


- name: "Filesystem creation"
  filesystem:
    dev:       "{{ item.dev }}"
    fstype:    "{{ item.fstype }}"
  loop: "{{ disk_data }}"
  when:
    - item.lv != ""

