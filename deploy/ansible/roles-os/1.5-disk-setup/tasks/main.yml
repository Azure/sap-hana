# /*----------------------------------------------------------------------------8
# |                                                                            |
# |                         OS Base Disk Configuration                          |
# |                                                                            |
# +------------------------------------4--------------------------------------*/
---
# -------------------------------------+---------------------------------------8
#
# Task: 1.5     - os-disk-setup
#
# -------------------------------------+---------------------------------------8

# -------------------------------------+---------------------------------------8
#
# <Comment Header>
#
# -------------------------------------+---------------------------------------8

#----------------------------------------
# BEGIN
#----------------------------------------

#----------------------------------------
# END
#----------------------------------------

# # Prepare disks and mount points

# # TODO: Refactor
# # Check if installation paths are ready. If paths are unready, path_status_flag will be set. Then subsequent tasks will be executed.
# - import_tasks: installation_path_prechecks.yml

# - include_tasks: lvm_mount.yml
#   when: path_status_flag is defined

# Expectations:
#
#   Volume Groups: (pvs are only examples)
#     - { tier: 'all',      vg: 'vg_sap',         pvs: '/dev/disk/azure/scsi1/lun0' }
#     - { tier: 'hdb',      vg: 'vg_hana_data',   pvs: '/dev/disk/azure/scsi1/lun1,/dev/disk/azure/scsi1/lun2,/dev/disk/azure/scsi1/lun3' }
#     - { tier: 'hdb',      vg: 'vg_hana_log',    pvs: '/dev/disk/azure/scsi1/lun4,/dev/disk/azure/scsi1/lun5,/dev/disk/azure/scsi1/lun6' }
#     - { tier: 'hdb',      vg: 'vg_hana_backup', pvs: '/dev/disk/azure/scsi1/lun7' }
#
#   Logical Volumes:
#    - { tier: 'all',         lv: 'lv_usrsap',        vg: 'vg_sap',         size: '64g',       opts: '' }
#    - { tier: 'preparation', lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '128g',      opts: '' }
#    - { tier: 'preparation', lv: 'lv_usrsapinstall', vg: 'vg_sap',         size: '100%FREE',  opts: '' }
#    - { tier: 'hdb',         lv: 'lv_hana_shared',   vg: 'vg_sap',         size: '100%FREE',  opts: '' }
#    - { tier: 'hdb',         lv: 'lv_hana_data',     vg: 'vg_hana_data',   size: '100%FREE',  opts: '-i 3 -I 128' }
#    - { tier: 'hdb',         lv: 'lv_hana_log',      vg: 'vg_hana_log',    size: '100%FREE',  opts: '-i 3 -I 32' }
#    - { tier: 'hdb',         lv: 'lv_hana_backup',   vg: 'vg_hana_backup', size: '100%FREE',  opts: '' }
#    - { tier: 'web',         lv: 'lv_sapmnt',        vg: 'vg_sap',         size: '1g',        opts: '' }
#
#   Filesystems:
#    - { tier: 'all',         fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsap' }
#    - { tier: 'preparation', fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }
#    - { tier: 'preparation', fstype: 'xfs', dev: '/dev/vg_sap/lv_usrsapinstall' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_sap/lv_hana_shared' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_data/lv_hana_data' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_log/lv_hana_log' }
#    - { tier: 'hdb',         fstype: 'xfs', dev: '/dev/vg_hana_backup/lv_hana_backup' }
#    - { tier: 'web',         fstype: 'xfs', dev: '/dev/vg_sap/lv_sapmnt' }

# Get all the unique disk types from sap-parameters

- name: Get the unique disk types
  set_fact:
    disktypes: "{{ (disktypes|default([]) +  [ { 'type': item.type }])|unique }}"
    cacheable: yes
  loop: "{{ disks }}"

- name: Define volume groups
  set_fact:
    volume_groups: >-
      [
        {% for disk in disktypes %}
          {% set disk_count = 0 %}
          {% set pvslist = [] %}
          {% for disk2 in disks if disk2.type == disk.type %}
            {% set disk_count =  disk_count  + 1 %}
            {% do pvslist.append('/dev/disk/azure/scsi1/lun' ~ disk2.LUN) %}

            {% do disk.update({'host': disk2.host }) %}
            {% do disk.update({'vg': 'vg_' ~ disk.type }) %}
            {% do disk.update({'disk_count': loop.index }) %}
            {% do disk.update({'pvs': pvslist | join(',') }) %}

          {% endfor %}
        {% endfor %}
        {% for disk in disktypes %}
          {{ disk }},
        {% endfor %}
      ]

- name: Get
  debug:
    var: volume_groups


- name: "Define Logical Volumes"
  set_fact:
    logical_volumes: >-
      [
        {% for disk in disktypes %}
          {% set disk_count = 0 %}
          {% for disk2 in disks if disk2.type == disk.type %}
            {% set disk_count =  disk_count  + 1 %}

            {% if disk2.type == 'data' %}
              {% set opts = '-i ' ~ loop.index ~' -I 256' %}
              {% set tier = 'hdb' %}
            {% elif disk2.type == 'log' %}
              {% set opts = '-i ' ~ loop.index ~' -I 64' %}
              {% set tier = 'hdb' %}
            {% elif disk2.type == 'shared' %}
              {% set opts = '' %}
              {% set tier = 'hdb' %}
            {% elif disk2.type == 'backup' %}
              {% if loop.index > 1 %}
                {% set opts = '-i ' ~ loop.index ~' -I 256' %}
                {% set tier = 'hdb' %}
              {% else %} 
                {% set opts = '' %}
              {% endif %} 
              {% set tier = 'hdb' %}
            {% else %}
              {% if loop.index > 1 %}
                {% set opts = '-i ' ~ loop.index ~' -I 256' %}
                {% set tier = 'hdb' %}
              {% else %} 
                {% set opts = '' %}
                {% set tier = 'all' %}
            {% endif %}
            {% endif %}

            {% if disk2.type == 'sap' %}
              {% set size = '64g' %}
            {% elif disk2.type == 'web' %}
              {% set size = '4g' %}
            {% else %}
              {% set size = '100%FREE' %}
            {% endif %}

            {% do disk.update({'host': disk2.host }) %}
            {% do disk.update({'tier': tier }) %}
            {% do disk.update({'opts': opts }) %}
            {% do disk.update({'vg': 'vg_' ~ disk.type }) %}
            {% do disk.update({'lv': 'lv_' ~ disk.type }) %}
            {% do disk.update({'size': size }) %}

          {% endfor %}
        {% endfor %}


        {% for disk in disktypes %}
          {% if disk.type == 'sap' %}
            {{ disk }},
            {{ { 'tier' : 'preparation',  'host' : disk.host, 'vg' : disk.vg, 'type' : disk.type, 'lv': 'lv_sapmnt',        'size' : '128g',      'opts' : '' } }},
            {{ { 'tier' : 'preparation',  'host' : disk.host, 'vg' : disk.vg, 'type' : disk.type, 'lv': 'lv_usrsapinstall', 'size' : '100%FREE',  'opts' : '' } }},
            {{ { 'tier' : 'web',          'host' : disk.host, 'vg' : disk.vg, 'type' : disk.type, 'lv': 'lv_sapmnt',        'size' : '1g',        'opts' : '' } }},
          {% else %}
            {{ disk }},
          {% endif %}
        {% endfor %}
      ]

- name: "Define Filesystems"
  set_fact:
    file_systems: >-
      [
        {% for lv in logical_volumes %}
          {{ {'tier' : lv.tier, 'host' : lv.host, 'fstype' : 'xfs', 'dev' : '/dev/' ~ lv.vg ~'/' ~lv.lv } }},
        {% endfor %}
      ]

- name: Volume Group creation
  lvg:
    vg: "{{ item.vg }}"
    pvs: "{{ item.pvs }}"
    pesize: 4M
    state: present

  loop: "{{ volume_groups }}"
  when:
    - item.host == inventory_hostname

- name: "Logical Volume creation"
  lvol:
    lv: "{{ item.lv }}"
    vg: "{{ item.vg }}"
    size: "{{ item.size }}"
    opts: "{{ item.opts }}"
    active: yes
    state: present
    shrink: no
    resizefs: no
  loop: "{{ logical_volumes }}"
  when:
    - item.host == inventory_hostname

- name: "Filesystem creation"
  filesystem:
    dev: "{{ item.dev }}"
    fstype: "{{ item.fstype }}"
  loop: "{{ file_systems }}"
  when:
    - item.host == inventory_hostname

