---
# Assumptions
#   target_media_location exists on disk
#
# Inputs:
#   target_media_location             Default     /usr/sap/install
#   download_directory
#   bom_name
#   sapbits_location_base_path
#   sapbits_bom_files
#   sapbits_sas_token
#
# Locals:
#   _bom
#   item
#   result
#
# BOM Fields:
#   download
#   archive
#   permissions
#   


# Steps:
#   01) Register BOM
#   02) Validate media from bom

#   01) Register BOM
- name:         "Register BOM: {{ bom_name }}"
  include_vars:
    file:       "{{ download_directory }}/bom/{{ bom_name }}.yaml"
    name:       _bom

#------------------<DEBUGGING>-------------------
- debug:  
    msg:      "Archive: {{ item.archive }} Url: {{ item.url }} Dest: {{ download_directory }}/{{ item.archive }}"
  loop:       "{{ bom.materials.media|flatten(levels=1) }}"
#------------------</DEBUGGING>------------------


# Files to download
#------------------<DEBUGGING>-------------------
# - debug:  
#     msg:      
#       - "URL : {{ item.url }}"
#   loop:       "{{ bom.materials.media|flatten(levels=1) }}"
#------------------</DEBUGGING>------------------



#   02) Validate media from SAP
# Loop through BOM media files 
- name: "BOM: Check Files"
  get_url:
    url:              "{{ item.url }}"
    dest:             "{{ download_directory }}/bom/{{ item.archive }}"
    tmp_dest:         "{{ download_directory }}/tmp"
    url_username:     "{{ S_user }}"
    url_password:     "{{ S_password }}"
    force_basic_auth: yes
    http_agent:       'SAP Software Download'
  
  register: result
  until:    result is succeeded
  retries:  2
  delay:    1
  loop:     "{{ _bom.materials.media|flatten(levels=1) }}"
  when:     item.url is defined

# -------------------------------------+---------------------------------------8

...
# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/














# - name:         "Ensure {{ target_media_location }} exists"
#   file:
#     path:       "{{ target_media_location }}"
#     state:      directory
#   check_mode:   "{{ test_mode is defined and test_mode }}"

# - name:               "Ensure current property is iterated"
#   include_tasks:      download_media.yaml
#   vars:
#     default_location: "{{ bom.defaults.target_location | regex_replace('/$', '') }}"
#     bom_media:        "{{ media_iterator.media }}"
#     source_location:  "{{ media_iterator.uri_location }}"
#     file_name:        "{{ media_iterator.property_name }}"
#   loop:
#     - uri_location:   archives
#       property_name:  archive
#       media:          "{{ bom.materials.media | flatten(levels=1) }}"
#     # - uri_location:   "boms/{{ bom_base_name }}/stackfiles"
#     #   property_name:  file
#     #   media:          "{{ bom.materials.stackfiles | flatten(levels=1) }}"
#     # - uri_location:   "boms/{{ bom_base_name }}/templates"
#     #   property_name:  file
#     #   media:          "{{ bom.materials.templates if (bom.materials.templates | type_debug == 'list') else [] | flatten(levels=1) }}"
#   loop_control:
#     loop_var:         media_iterator

# - name:               "Ensure {{ bom_base_name }} dependencies are followed"
#   when:               bom_dependencies | length != 0
#   include_tasks:      "{{ iterator }}"
#   vars:
#     bom_dependencies: "{{ bom.materials.dependencies is defined | ternary(bom.materials.dependencies, []) }}"
#     bom_media:        "{{ bom.materials.media }}"
#     bom_base_name:    "{{ item.name }}"
#   loop:               "{{ bom_dependencies | flatten(levels=1) }}"




#------------------<DEBUGGING>-------------------
# - name:           Ensure target folders exist
#   debug:  
#     msg:          "{{ download_location }}"
#   loop:           "{{
#                       bom_media |
#                       flatten(levels=1) |
#                       selectattr('override_target_location', 'defined') |
#                       map(attribute='override_target_location') |
#                       list |
#                       union([default_location]) |
#                       unique }}"
#   loop_control:
#     loop_var:     download_location
#------------------</DEBUGGING>------------------

# - name: "Ensure media property is iterated"
#   block:
#     - name: Ensure target folders exist
#       file:
#         path: "{{ download_location }}"
#         state: directory
#       loop: "{{
#         bom_media |
#         flatten(levels=1) |
#         selectattr('override_target_location', 'defined') |
#         map(attribute='override_target_location') |
#         list |
#         union([default_location]) |
#         unique }}"
#       loop_control:
#         loop_var: download_location
#       check_mode: "{{ test_mode is defined and test_mode }}"


#------------------<DEBUGGING>-------------------
# - debug:  
#     msg:          "{{ download_iterator }}"
#   loop:           "{{ bom_media | flatten(levels=1) }}"
#   loop_control:
#     loop_var:     download_iterator
#------------------</DEBUGGING>------------------


    # - name: Ensure media are downloaded
    #   vars:
    #     archive_location:           "{{ sapbits_location_base_path }}/{{ sapbits_bom_files }}/{{ source_location }}"
    #     default_file_name:          "{{ download_iterator[file_name] }}"
    #     file_source:                "{{ archive_location }}/{{ default_file_name }}"
    #     file_dest_target_location:  "{{ download_iterator.override_target_location is defined | ternary(download_iterator.override_target_location, default_location) | regex_replace('/$', '') }}"
    #     file_dest_target_name:      "{{ download_iterator.override_target_filename is defined | ternary(download_iterator.override_target_filename, default_file_name) }}"
    #     file_dest:                  "{{ file_dest_target_location }}/{{ file_dest_target_name }}"
    #   uri:
    #     url:                        "{{ file_source }}{{ sapbits_sas_token }}"
    #     dest:                       "{{ file_dest }}"
    #     creates:                    "{{ file_dest }}"
    #   loop:                         "{{ bom_media | flatten(levels=1) }}"
    #   loop_control:
    #     loop_var:                   download_iterator
    #   check_mode:                   "{{ test_mode is defined and test_mode }}"



# - name: Determine SWPM archive name
#   set_fact:
#     swpm_archive: "{{ swpm_entry.override_target_filename is defined | ternary(swpm_entry.override_target_filename, swpm_entry.archive) }}"
#   vars:
#     swpm_entry: "{{
#       bom.materials.media |
#       flatten(levels=1) |
#       selectattr('archive', 'match', '^SWPM.*\\.SAR$') |
#       list |
#       first
#       }}"

# - name: Ensure SAPCAR is executable
#   file:
#     path: "{{ download_basket_dir }}/{{ sapcar_executable }}"
#     mode: "0755"


# - name: Ensure SWPM directory is present
#   file:
#     path: "{{ target_media_location }}/SWPM"
#     state: directory


# - name: Ensure SWPM is unarchived
#   command: >
#     {{ download_basket_dir }}/{{ sapcar_executable }} -xf {{ download_basket_dir }}/{{ swpm_archive }} -R {{ target_media_location }}/SWPM/
#   args:
#     creates: "{{ target_media_location }}/SWPM/SIGNATURE.SMF"

# - name: Determine SAPCAR executable file name
#   set_fact:
#     sapcar_executable: "{{ sapcar_entry.override_target_filename is defined | ternary(sapcar_entry.override_target_filename, sapcar_entry.archive) }}"
#   vars:
#     sapcar_entry: "{{
#       bom.materials.media |
#       flatten(levels=1) |
#       selectattr('archive', 'match', '^SAPCAR.*\\.EXE$') |
#       list |
#       first
#       }}"
