# This Azure pipeline YAML contains tests to validate and verify the pull requests made for automated deployment of SAP landscape.
# This pipeline will only run all the tests if the PR is made from a branch of Azure/sap-hana repo.
# Branches from forked repositories will fail in the Azure provider authentication phase due to security reason
# Only trigger build when a PR is opened for code under deploy/v2

pr:
  branches:
    include:
    - master
  paths:
    include:
    - deploy/v2/*
variables:
  - group: azure-config-variables
  - group: azure-sap-hana-pipeline-secrets
stages: 
#####################################################################
# This stage create resources for below test cases:                 # 
# - createAllNew: it creates all resources from scratch             # 
# - reuseRG: it only reuses an existing resource group              #
# - reuseVnet: it only reuses an existing vnet from createAllNew    #
# - reuseNSG: it only reuses an existing NSG from createAllNew      #
#####################################################################
- stage: CreatingResources
  jobs:
  - job: createAllNew
    pool:
      vmImage: "ubuntu-16.04"
    steps:        
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        inputJSONFile: '../pipelineInputJSON/input.auto.tfvars.allNew.json'
        testCaseName: 'v2-allNew'
        replacePlaceHolder: 'VAR_AZ_RG_NAME'
        replaceValue: 'v2-allNew-$(Build.BuildId)'
  - job: reuseRG
    steps:
    - script: |
        az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
        az group create --location westus2 -n v2-existingRG-$(Build.BuildId)
        echo '##vso[task.setvariable variable=arm_id]$(az group show --name v2-existingRG-$(Build.BuildId) --query id --output tsv)'
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        inputJSONFile: '../pipelineInputJSON/input.auto.tfvars.existingRG.json'
        testCaseName: 'v2-existingRG'
        replacePlaceHolder: 'VAR_AZ_RG_ID'
        replaceValue: $(arm_id)
  - job: reuseVnet
    dependsOn: createAllNew
    steps:
    - script: |
        az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
        echo '##vso[task.setvariable variable=arm_id]$(az network vnet show --resource-group v2-allNew-$(Build.BuildId) --name vnet-management --query id --output tsv)'
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        inputJSONFile: '../pipelineInputJSON/input.auto.tfvars.existingVnet.json'
        testCaseName: 'v2-existingVnet'
        replacePlaceHolder: 'VAR_AZ_VNET_ID'
        replaceValue: $(arm_id)
  - job: reuseNSG
    dependsOn: createAllNew
    steps:
    - script: |
        az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
        echo '##vso[task.setvariable variable=arm_id]$(az network nsg show --resource-group v2-allNew-$(Build.BuildId) --name nsg-mgmt --query id --output tsv)'
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        inputJSONFile: '../pipelineInputJSON/input.auto.tfvars.existingNSG.json'
        testCaseName: 'v2-existingNSG'
        replacePlaceHolder: 'VAR_AZ_NSG_ID'
        replaceValue: $(arm_id)
#####################################################################
# This stage destroy resources crated from all above test cases.    #
# It will be triggered after stage CreatingResources is finished.   #
# It will always be triggered, regardless the status of stage one - #
# success of fail                                                   #
#####################################################################
- stage: DestroyingResources
  dependsOn: CreatingResources
  condition: succeededOrFailed()
  jobs:
  - job: cleanUp
    steps:
      - script: |
          az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          az group delete -n v2-allNew-$(Build.BuildId) --no-wait -y
          az group delete -n v2-existingRG-$(Build.BuildId) --no-wait -y
          az group delete -n v2-existingVnet-$(Build.BuildId) --no-wait -y
          az group delete -n v2-existingNSG-$(Build.BuildId) --no-wait -y
        displayName: 'Clean up'
        env:
          TF_VAR_azure_service_principal_id: $(hana-pipeline-spn-id)
          TF_VAR_azure_service_principal_pw: $(hana-pipeline-spn-pw)
          AZURE_CLIENT_ID: $(hana-pipeline-spn-id)
          AZURE_SECRET: $(hana-pipeline-spn-pw)
          AZURE_TENANT: $(landscape-tenant)
          AZURE_SUBSCRIPTION_ID: $(landscape-subscription)
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
